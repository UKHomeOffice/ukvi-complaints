---
kind: pipeline
name: default
type: kubernetes

environment:
  APP_NAME: ukvi-complaints
  PROD_ENV: ukvi-complaints
  STG_ENV: ukvi-complaints-stg
  UAT_ENV: ukvi-complaints-uat
  BRANCH_ENV: ukvi-complaints-branch
  PRODUCTION_URL: www.ukvi-complaints.homeoffice.gov.uk
  IMAGE_URL: quay.io/ukhomeofficedigital
  IMAGE_REPO: ukvi-complaints
  GIT_REPO: UKHomeOffice/ukvi-complaints
  HOF_CONFIG: hof-services-config/UKVI_Complaints
  NON_PROD_AVAILABILITY: Mon-Fri 08:00-23:00 Europe/London
  READY_FOR_TEST_DELAY: 20s
  NOTIFY_STUB: stub

include_default_branch: &include_default_branch
  include:
    - master

include_default_and_feature_branches: &include_default_and_feature_branches
  include:
    - master
    - feature/*

trigger:
  branch:
    <<: *include_default_and_feature_branches

node_image: &node_image
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/hof-nodejs@sha256:b5363fcb205423820cabe7605de5fb997b78688aad3a2bc5555e7f26bfa22181

linting: &linting
  <<: *node_image
  environment:
    NOTIFY_KEY: USE_MOCK
  commands:
    - yarn run test:lint

unit_tests: &unit_tests
  <<: *node_image
  environment:
    NOTIFY_KEY: USE_MOCK
  commands:
    - yarn run test:unit

sonar_scanner: &sonar_scanner
  pull: if-not-exists
  image: quay.io/ukhomeofficedigital/sonar-scanner-nodejs:latest
  commands:
    - sonar-scanner -Dproject.settings=./sonar-project.properties

acceptance_tests: &acceptance_tests
  failure: ignore
  pull: if-not-exists
  image: mcr.microsoft.com/playwright:v1.48.2-focal-amd64

steps:
  - name: clone_repos
    pull: if-not-exists
    image: alpine/git
    environment:
      DRONE_GIT_USERNAME:
        from_secret: DRONE_GIT_USERNAME
      DRONE_GIT_TOKEN:
        from_secret: DRONE_GIT_TOKEN
    commands:
      - git clone https://$${DRONE_GIT_USERNAME}:$${DRONE_GIT_TOKEN}@github.com/UKHomeOfficeForms/hof-services-config.git
      - find hof-services-config/* | grep -v $HOF_CONFIG | grep -v 'infrastructure' | xargs rm -rf
    when:
      branch:
        <<: *include_default_and_feature_branches
      event: [push, pull_request]

  - name: scan_base_image_os
    pull: always
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/trivy/client:latest
    resources:
      limits:
        cpu: 1000
        memory: 1024Mi
    environment:
      IMAGE_NAME: quay.io/ukhomeofficedigital/hof-nodejs@sha256:b5363fcb205423820cabe7605de5fb997b78688aad3a2bc5555e7f26bfa22181
      SERVICE_URL: https://acp-trivy-helm.acp-trivy.svc.cluster.local:443
      SEVERITY: MEDIUM,HIGH,CRITICAL  --dependency-tree
      FAIL_ON_DETECTION: false
      IGNORE_UNFIXED: false
      ALLOW_CVE_LIST_FILE: hof-services-config/infrastructure/trivy/.trivyignore.yaml
    volumes:
      - name: dockersock
        path: /root/.dockersock
    when:
      event: [push, pull_request]
    depends_on:
      - clone_repos

  - name: setup
    <<: *node_image
    environment:
      NOTIFY_KEY: USE_MOCK
    commands:
      - yarn install --frozen-lockfile
      - yarn run postinstall
    when:
      branch:
        <<: *include_default_and_feature_branches
      event: [push, pull_request]

  - name: linting
    <<: *linting
    when:
      branch:
        <<: *include_default_and_feature_branches
      event: [push, pull_request]
    depends_on:
      - setup

  - name: unit_tests
    <<: *unit_tests
    when:
      branch:
        <<: *include_default_and_feature_branches
      event: [push, pull_request]
    depends_on:
      - setup

  - name: sonar_scanner
    <<: *sonar_scanner
    when:
      branch:
        <<: *include_default_and_feature_branches
      event: [push, pull_request]

  - name: build_image_for_trivy
    pull: if-not-exists
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
    commands:
      # wait for docker service to be up before running docker build
      - /usr/local/bin/wait
      - docker build --no-cache -t $${IMAGE_REPO}:$${DRONE_COMMIT_SHA} .
    volumes:
      - name: dockersock
        path: /var/run
    when:
      branch:
        <<: *include_default_and_feature_branches
      event: [push, pull_request]
    depends_on:
      - linting
      - unit_tests

  - name: build_image_and_push_to_quay
    pull: if-not-exists
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
    environment:
      DOCKER_PASSWORD:
        from_secret: DOCKER_PASSWORD
    commands:
      - docker login -u="ukhomeofficedigital+sas_fbis_robot" -p=$${DOCKER_PASSWORD} quay.io
      - docker tag $${IMAGE_REPO}:$${DRONE_COMMIT_SHA} $${IMAGE_URL}/$${IMAGE_REPO}:$${DRONE_COMMIT_SHA}
      - docker push $${IMAGE_URL}/$${IMAGE_REPO}:$${DRONE_COMMIT_SHA}
    when:
      branch:
        <<: *include_default_and_feature_branches
      event: [push, pull_request]
    depends_on:
      - linting
      - unit_tests
      - build_image_for_trivy

  - name: scan_node_packages
    pull: always
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/trivy/client:latest
    resources:
      limits:
        cpu: 1000
        memory: 1024Mi
    environment:
      IMAGE_NAME: ukvi-complaints:${DRONE_COMMIT_SHA}
      SEVERITY: MEDIUM,HIGH,CRITICAL  --dependency-tree --format table
      FAIL_ON_DETECTION: false
      IGNORE_UNFIXED: false
      ALLOW_CVE_LIST_FILE: hof-services-config/infrastructure/trivy/.trivyignore.yaml
    volumes:
      - name: dockersock
        path: /root/.dockersock
    when:
      event: [push, pull_request]
    depends_on:
      - build_image_for_trivy

  - name: deploy_to_branch
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER:
        from_secret: kube_server_dev
      KUBE_TOKEN:
        from_secret: kube_token_sas_dev
    commands:
      - bin/deploy.sh $${BRANCH_ENV}
    when:
      branch:
        <<: *include_default_and_feature_branches
      event: pull_request
    depends_on:
      - clone_repos
      - build_image_and_push_to_quay

  - name: deploy_to_uat
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER:
        from_secret: kube_server_dev
      KUBE_TOKEN:
        from_secret: kube_token_sas_dev
    commands:
      - bin/deploy.sh $${UAT_ENV}
    when:
      branch:
        <<: *include_default_branch
      event: push
    depends_on:
      - clone_repos
      - build_image_and_push_to_quay

  - name: get_pr_branch
    pull: if-not-exists
    image: drone/cli:alpine@sha256:14409f7f7247befb9dd2effdb2f61ac40d1f5fbfb1a80566cf6f2f8d21f3be11
    environment:
      DRONE_SERVER:
        from_secret: drone_server
      DRONE_TOKEN:
        from_secret: drone_token
    volumes:
      - name: dockersock
        path: /root/.dockersock
    commands:
      - drone build info $GIT_REPO $DRONE_BUILD_NUMBER --format {{.Message}} | grep -o '[^ ]\+$' -m1 | sed 's|UKHomeOffice/||g' | tr '[:upper:]' '[:lower:]' | tr '/' '-' > /root/.dockersock/branch_name.txt
    when:
      branch:
        <<: *include_default_branch
      event: push

  - name: tear_down_branch
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER:
        from_secret: kube_server_dev
      KUBE_TOKEN:
        from_secret: kube_token_sas_dev
    volumes:
      - name: dockersock
        path: /root/.dockersock
    commands:
      - bin/deploy.sh tear_down
    when:
      branch:
        <<: *include_default_branch
      event: push
    depends_on:
      - get_pr_branch
      - deploy_to_uat

  - name: deploy_to_stg
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER:
        from_secret: kube_server_stg
      KUBE_TOKEN:
        from_secret: kube_token_stg
    commands:
      - bin/deploy.sh $${STG_ENV}
    when:
      branch:
        <<: *include_default_branch
      event: push
    depends_on:
      - clone_repos
      - build_image_and_push_to_quay

  - name: sanity_check_build_prod
    pull: if-not-exists
    image: drone/cli:alpine@sha256:14409f7f7247befb9dd2effdb2f61ac40d1f5fbfb1a80566cf6f2f8d21f3be11
    environment:
      DRONE_SERVER:
        from_secret: drone_server
      DRONE_TOKEN:
        from_secret: drone_token
    commands:
      - bin/sanity_check_build.sh
    when:
      target: PROD
      event: promote

  - name: clone_repos_prod
    pull: if-not-exists
    image: alpine/git
    environment:
      DRONE_GIT_USERNAME:
        from_secret: DRONE_GIT_USERNAME
      DRONE_GIT_TOKEN:
        from_secret: DRONE_GIT_TOKEN
    commands:
      - git clone https://$${DRONE_GIT_USERNAME}:$${DRONE_GIT_TOKEN}@github.com/UKHomeOfficeForms/hof-services-config.git
      - find hof-services-config/* | grep -v $HOF_CONFIG | grep -v 'infrastructure' | xargs rm -rf
    when:
      target: PROD
      event: promote
    depends_on:
      - sanity_check_build_prod

  - name: deploy_to_prod
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER:
        from_secret: kube_server_prod
      KUBE_TOKEN:
        from_secret: kube_token_prod
    commands:
      - bin/deploy.sh $${PROD_ENV}
    when:
      target: PROD
      event: promote
    depends_on:
      - clone_repos_prod

  # CRON jobs and notification steps would follow the same pattern as the example
  # Please copy and adapt from the CSL pipeline as needed for security scans and slack notifications

services:
  - name: docker
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind

  - name: session
    image: redis
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}

...
